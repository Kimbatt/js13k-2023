import { log2 } from "../../util/math.js";
import { actx, CreateNoiseNode, globalTargetNode, NumberArray } from "../audio.js";

export function CreateInstrumentFromWave(numWaves: number, attack: boolean, real: NumberArray, imag: NumberArray)
{
    const wave = actx.createPeriodicWave(real, imag);

    return (octave: number, note: number, volume: number, when: number, duration: number, fadeOutDuration = 0.2, Q = 0, targetNode?: AudioNode) =>
    {
        const target = targetNode ?? globalTargetNode;

        const frequency = (2 ** (log2(440) + octave - 4 + (note - 9) / 12)) / numWaves;
        const fadeInDuration = 0.001;

        const oscillator = actx.createOscillator();
        const gain = actx.createGain();
        const filter = actx.createBiquadFilter();

        oscillator.frequency.value = frequency;

        gain.gain.value = 0;
        let time = when;
        gain.gain.linearRampToValueAtTime(0, time);
        time += fadeInDuration;
        gain.gain.linearRampToValueAtTime(attack ? volume * 1.4 : volume, time);
        time += 0.05;
        gain.gain.linearRampToValueAtTime(volume, time);
        time += duration;
        gain.gain.linearRampToValueAtTime(volume, time);
        time += fadeOutDuration;
        gain.gain.linearRampToValueAtTime(0, time);

        filter.type = "bandpass";
        filter.frequency.value = frequency;

        filter.Q.value = -Q;
        filter.Q.linearRampToValueAtTime(-Q, when);
        filter.Q.linearRampToValueAtTime(0, when + fadeInDuration);
        filter.Q.linearRampToValueAtTime(Q, time);

        oscillator.connect(gain).connect(filter).connect(target);

        oscillator.setPeriodicWave(wave);

        oscillator.start(when);
        oscillator.stop(time);


        if (attack)
        {
            const noise = CreateNoiseNode();
            const gain2 = actx.createGain();
            const filter2 = actx.createBiquadFilter();

            filter2.frequency.value = 8000;
            filter2.Q.value = 2;

            gain2.gain.value = 0;
            gain2.gain.linearRampToValueAtTime(0, when);
            gain2.gain.linearRampToValueAtTime(volume * 0.2, when + fadeInDuration);
            gain2.gain.linearRampToValueAtTime(0, when + fadeInDuration + 0.001);

            noise.start(when);
            noise.stop(when + fadeInDuration + 0.001);

            noise.connect(gain2).connect(filter2).connect(target);
        }
    };
}

export const Guitar1 = CreateInstrumentFromWave(1, true,
    [0.03, 0.4, -1, 0.04, 0.4, 0.4, -0.15, -0.01, 0.04, -0.03, 0.02, -0.01, -0.01, -0.02, 0.01, 0.01, 0, 0, -0.01, 0, 0.01, -0.01, 0.01, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.01],
    [0, -0.24, -1.7, -0.43, -0.5, 0.2, 0.05, -0.08, 0.15, -0.04, -0.01, 0, 0.01, -0.02, -0.01, 0, -0.01, 0.01, 0, -0.01, 0.01, 0, 0, 0, 0, 0, -0.01, 0.01, -0.01, 0, 0, 0, 0, 0, 0, 0, -0.01, 0.01, 0]
);

export const Guitar2 = CreateInstrumentFromWave(1, true,
    [-0.02, -0.2, -0.4, -0.1, 1, -0.04, -0.07, 0, 0.1, -0.3, -0.1, 0.2, 0.15, 0.15, -0.02, -0.02, 0.02, -0.1, 0.1, -0.1, -0.06, 0.01, 0, 0.01, 0.01, 0.01, 0, 0, 0, 0, 0.01, 0.01, 0, -0.01, 0, 0.01, 0.01, 0.01, 0.01, 0.01, 0.03, -0.03, -0.02, -0.04, 0, -0.03, 0, -0.01, 0, -0.03, 0, -0.03, -0.03, -0.01, 0.01, 0, -0.01, -0.02, -0.02, 0.04, -0.01, 0.04, 0.01, 0, 0.01, 0, 0, 0, 0, 0, -0.01, 0, 0.01, 0, 0, 0, 0, -0.01],
    [0, -4, 0.5, -0.5, 0.07, 0, -0.17, -0.05, 0.06, 0.21, -0.46, -0.3, -0.14, 0.05, 0.07, 0.01, -0.08, -0.13, 0.04, -0.01, 0.02, 0, -0.01, -0.01, -0.03, 0.02, -0.02, 0, -0.01, -0.01, -0.01, -0.01, 0.02, 0.01, -0.04, 0.03, -0.02, 0, -0.03, 0.02, -0.02, 0, -0.02, 0.04, -0.03, 0, -0.01, 0, -0.02, 0.04, -0.01, -0.04, -0.02, 0.01, 0.01, 0.01, -0.01, 0.05, 0.01, -0.01, -0.01, 0.01, 0.01, -0.01, -0.01, -0.01, -0.01, 0, 0, -0.01, 0, 0, 0.01, 0, 0, 0, 0, 0.01]
);

export const Guitar3 = CreateInstrumentFromWave(1, true,
    [0.06, 0.7, -1, 0.42, -0.06, 0.02, -0.01, -0.03, -0.04, -0.04, -0.04, -0.06, -0.03, -0.14, -0.04, 0.15, 0.06, 0.03, 0.01, 0.16, -0.08, -0.07, 0, 0, -0.01, 0.01, -0.01, -0.01, -0.05, 0.02, 0.07, -0.07, 0.14, -0.05, -0.03, -0.11, 0.13],
    [0, -2.72, -1.52, -1.4, -0.03, -0.04, 0.06, 0.07, 0.08, 0.07, 0.08, 0.1, 0.03, 0.09, 0.01, -0.06, 0.01, 0.01, -0.08, 0.12, -0.03, -0.03, 0.01, 0.01, 0.01, 0.02, 0.01, 0.04, 0.02, 0, 0.06, -0.2, -0.03, -0.1, -0.03, 0.03, 0.01]
);

export const Guitar4 = CreateInstrumentFromWave(4, true,
    [0, 0, 0, 0.1, -0.4, 0, 1, 0, -0.9, 0.1, 0.4, -0.1, 0, 0.2, -0.1, 0.1, 0, 0, 0.1, 0.1, 0, 0, 0, 0, 0, 0.1, 0.2, -0.2, -0.3, 0.1, 0.1, -0.2, 0, 0, 0.1, 0, -0.1, -0.4, 0.2, 0.4, 0.1, 0.3, 0.3, 0, 0, -0.2, 0.1, -0.1, -0.1, -0.3, 0.1, -0.1, 0, 0, 0.1, 0.1, 0, 0.1, 0.1, -0.2, 0, -0.1, -0.1, 0, 0, -0.1, -0.2, 0, 0.1, 0, -0.1, 0.1, -0.1, 0, 0, -0.1, -0.1, 0, -0.1, -0.1],
    [0, 0, 0, -0.1, 0.2, 0, -0.3, 0.1, -0.5, -0.8, 0, 0, -0.4, 0, -0.3, -0.1, 0, 0, 0, 0, 0.1, 0.1, 0, -0.1, 0, 0.1, -0.4, 0.1, -0.1, -0.2, 0, 0, -0.1, 0, 0.1, -0.2, 0, -0.2, 0, -0.2, 0, 0.4, 0, -0.4, 0.3, 0.1, 0, -0.1, 0.2, -0.1, 0.2, -0.1, -0.2, -0.2, 0.2, 0, -0.2, 0.1, -0.2, -0.2, 0, 0, 0, 0, 0.1, -0.1, -0.1, 0, 0.1, 0, 0, 0.1, 0, 0, 0, 0, 0, 0, 0, 0]
);

export const Guitar5 = CreateInstrumentFromWave(1, true,
    [-0.05, 0.63, 1, 0.19, -0.11, -0.01, 0.12, -0.21, 0.02, -0.71, 0.01, -0.07, -0.37, 0, 0.02, -0.01, -0.03, 0.01, -0.11, -0.02, -0.04, -0.44, 0.05, 0.03, 0.02, 0, -0.02, -0.04, 0.02, 0.01, 0.02, 0, 0.01, 0.02, 0, 0.01, 0.03, -0.03, -0.01, -0.01, 0.02, 0.01, 0.02, -0.05],
    [0, 0.39, 0.3, 0.5, -0.25, -0.23, 0.06, 0.14, -0.02, -0.7, -0.01, -0.07, -0.39, -0.01, -0.03, 0.01, -0.01, -0.03, -0.44, 0, -0.01, -0.14, 0.02, 0, 0.01, 0, 0.01, 0.02, -0.01, -0.02, -0.06, 0.01, 0, 0, 0, -0.01, -0.02, 0.02, 0.01, 0.02, -0.02, -0.01, -0.02, 0.03]
);

export const Guitar6 = CreateInstrumentFromWave(1, true,
    [1, -0.43, 0.34, -0.09, -0.15, -0.01, 0.22, 0.08, -0.21, -0.04, 0.07, -0.02, -0.13, 0.04, 0.03, -0.09, 0.19, 0.11, -0.09, 0.1, -0.02, 0.05, 0.01, -0.02, 0.13, -0.07, 0.01, 0.06, -0.04, -0.07, -0.05, 0.04, -0.02, -0.02, -0.07, -0.05, 0, -0.06, 0.03, -0.07, -0.08, 0.01, -0.01, 0, 0.01, -0.01, 0, 0, 0.02, -0.01, -0.01, 0, 0.01, 0, -0.04, 0.02, -0.01, 0.01, 0.02, -0.02, 0.02, -0.02, 0.02, 0.04, -0.04, 0.02, 0.01, 0, 0.01, 0, 0.01, -0.02, 0.02, 0.02, 0, -0.01, -0.01, 0.01, 0, 0.01, -0.01, -0.01, 0.01, -0.01, 0.01, 0, -0.02, 0.01, -0.01, 0, -0.01, 0, 0.01, -0.01, 0.01, -0.01, -0.01, 0.01],
    [0, -0.3, -0.84, -0.03, 0.16, 0.03, -0.06, 0.02, -0.1, -0.17, 0.14, 0.12, -0.16, -0.11, 0.15, -0.02, -0.18, 0.08, -0.07, -0.11, 0.02, -0.03, -0.03, -0.11, -0.01, -0.03, -0.08, -0.05, 0, -0.02, -0.02, -0.03, 0.03, -0.01, -0.04, 0, 0.07, -0.03, -0.08, 0.09, -0.02, 0.04, 0.04, -0.04, 0, 0.03, 0.05, -0.01, -0.04, 0.02, -0.03, 0, 0, 0.02, -0.01, 0, 0.03, 0.01, 0, -0.02, 0.01, 0.02, -0.02, 0.01, -0.02, -0.01, 0.02, -0.01, -0.01, -0.02, 0.02, 0.01, -0.02, 0.01, 0.01, 0, 0, -0.01, -0.01, -0.03, 0, -0.01, 0, 0, -0.03, 0.02, -0.01, 0, 0.01, -0.01, -0.01, -0.01, 0.01, -0.01, -0.02, 0, 0, 0.01]
);

export const Guitar7 = CreateInstrumentFromWave(1, true,
    [1, -0.51, 0.14, -0.16, 0, -0.02, -0.01, 0.06, -0.05, -0.1, -0.07, 0.04, 0.01, 0.08, -0.04, -0.08, 0.18, 0.02, 0.03, -0.03, -0.08, 0.03, -0.01, 0.07, -0.07, -0.07, 0.03, -0.07, 0.01, 0.02, -0.03, -0.01, 0.06, 0.02, -0.03, 0, -0.03, 0.01, 0, -0.03, -0.02, -0.02, 0, -0.06, -0.04, -0.04, -0.01, -0.02, -0.03, 0.01, 0.01, 0.01, -0.01, 0.03, 0.01, -0.02, 0.03, 0.02, 0.05, 0.03, 0, 0, 0.02, 0.01, -0.01, 0, 0.01, 0.01, 0.01, -0.01, 0, 0, 0, 0.01, 0.01, 0.01, 0, -0.01, 0.01, 0, 0, -0.04, 0.01, 0.02, 0.01, 0, -0.01, 0, 0.01, 0.01, 0, 0, 0.01, 0.02, 0, -0.01, -0.02, -0.01, 0, -0.01],
    [0, -0.17, -1.02, -0.2, 0.17, 0.25, -0.04, -0.09, -0.1, 0.05, 0.19, -0.11, -0.31, -0.27, 0.19, -0.03, -0.12, 0.02, -0.1, 0.07, -0.08, -0.07, -0.02, 0.02, 0.04, -0.08, 0.01, 0, -0.06, -0.07, 0, -0.11, -0.06, 0.05, -0.05, 0.07, 0.05, 0.01, 0.03, -0.02, 0.03, 0.07, 0.04, 0.02, -0.01, 0.01, 0.05, -0.01, -0.01, -0.03, 0.01, 0.02, -0.02, -0.02, 0.01, -0.01, 0.01, -0.02, -0.01, 0.03, 0.02, 0.01, 0.01, 0.01, 0.02, -0.01, -0.02, 0.02, 0, -0.01, 0, 0, 0, 0.02, -0.01, 0, 0.01, -0.02, -0.01, 0, 0, -0.01, -0.03, -0.01, -0.01, -0.02, -0.01, 0, 0, 0, -0.02, 0, 0.01, 0.01, 0, 0.01, 0.01, 0, 0.01, -0.02]
);

export const Bass1 = CreateInstrumentFromWave(1, false,
    [-0.02, -1, 0.17, 0.31, 0.18, 0.05, 0.06, 0.03, 0.02, 0.01, 0.01, 0.01, 0, 0, 0, 0.01, 0.01, 0, 0, 0, 0, 0.01, 0, -0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.01, 0.01, -0.01],
    [0, -0.46, 0.72, 0.17, 0.11, 0.11, 0.08, 0.02, 0.01, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, -0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0.01]
);
